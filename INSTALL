For Microsoft Windows users, an executable file is included. This will
likely only be updated every release. It was compiled on Windows Vista
(32-bit version). It will probably work on other versions of Windows,
although I have had a report of it crashing on Windows XP.

If you are compiling it yourself, you will require

 * The OpenSSL library (http://www.openssl.org/). Some Ubuntu users have
 had trouble finding the right package to install, and the one they need
 is called "libssl-dev".
 * libgsf is also required if support for decrypting is enabled
 * A C and C++ compiler such as gcc and g++

Unix or GNU/Linux
=================

If you have downloaded a snapshot of the git repository, you should run
autoconf to update the configure script.

Run

$ ./configure 

followed by

$ make

The "crackxls2003" executable will be created in the build directory.

You can specify the --without-libgsf flag to configure if you do not want
to use the libgsf library for decryption.

A choice of implementation algorithms may be chosen using the --with-algo
argument to configure. Most of these are experimental and not all the
necessary files are included with the distributed crackxls2003 source.

Windows
=======

crackxls2003 has been successfully compiled under Cygwin and using a
MinGW-targeted cross-compiler.

For convenience, a (not-necessarily up-to-date) Windows version is included
with the crackxls2003 source.

To compile a Windows version which does not depend on the Cygwin runtime,
you have several options:

* Use the MinGW cross-compiler. Install the i686-w64-mingw32 packages
from the Cygwin installer. (Or an appropriate package for your processor
type. The packages are confusingly named: the i686-w64-mingw32 packages
are for a 32-bit version of Windows.)

* Use the -mno-cygwin option to the Cygwin gcc. This option is deprecated
and has been removed in gcc version 4.

* Use the MinGW native compiler. This has not been tested but is expected
to work.

You will also need Windows versions of all of the dependencies. Acquiring
these can be a time-consuming and error-prone task. Also note that unless
you succeed in compiling static versions of the libraries, the compiled
executable will need their DLL's to run.

You will find "cygcheck", part of Cygwin, useful for checking DLL
dependencies. Specify the library search path with

$ PATH=/mingw/bin:$PATH cygcheck ...

"ldd" can be used for the same thing.

Once I compiled and installed all the library dependencies, I compiled
crackxls2003 with

./configure --prefix=/mingw \
--build=i686-pc-cygwin --host=i686-w64-mingw32 \
CFLAGS=-I/mingw/include CPPFLAGS=-I/mingw/include \
CXXFLAGS=-I/mingw/include LDFLAGS='-static -L/mingw/lib' \
PKG_CONFIG_PATH=/usr/i686-w64-mingw32/lib/pkgconfig:/mingw/lib/pkgconfig

Once you succeed in building crackxls2003.exe, if it depends on DLL's under
/mingw/bin, you will have to set the search path as above.

If running under cmd.exe in Windows, the same is done with

C:\> PATH=C:\cygwin\mingw\bin;%PATH%
C:\> crackxls2003.exe

Some notes on installing dependencies under Cygwin follow.

All libraries will be installed under the /mingw directory in the Cygwin
filesystem.

OpenSSL
-------

Configure with

$ ./Configure mingw --prefix=/mingw

libgsf
------

You should use a version greater than 1.14.11
otherwise there are various problems with zlib. (See
https://mail.gnome.org/archives/ftp-release-list/2009-January/msg00045.html)

Install the Cygwin intltool package.

You also need libxml2 and glib (see below).

Once all dependencies are installed, configure with

$ ./configure --prefix=/mingw \
  --build=i686-pc-cygwin --host=i686-w64-mingw32 \
 CFLAGS=-I/mingw/include CPPFLAGS=-I/mingw/include \
 CXXFLAGS=-I/mingw/include LDFLAGS=-L/mingw/lib \
 PKG_CONFIG_PATH=/mingw/lib/pkgconfig \
 --with-gnome-vfs=no --without-bonobo \
 --enable-shared --enable-static

The "--with" options are to disable using dependencies we don't need and
to prevent us accidentally using any native Cygwin libraries.

If you have glib installed under /usr/i686-w64-mingw32, you should set

R=/usr/i686-pc-cygwin/sys-root/mingw and use

PKG_CONFIG_PATH=$R/lib/pkgconfig:/mingw/lib/pkgconfig 

instead.

glib
----

You may download glib and any related libraries from
http://www.gtk.org/download/win32.php. Download the all-in-one bundle and
extract under /mingw.

The included pkg-config files will have the wrong prefix. Fix this with:

$ find /mingw -name "*.pc" | xargs sed -i 's,^prefix=.*$,prefix=/mingw,'

If you wish to use a static version of glib, your best choice
is to use the latest Fedora mingw32-glib2-static package.
http://koji.fedoraproject.org/koji/buildinfo?buildID=405366

I used mingw-glib2-2.35.9-1.fc19.src.rpm.

To compile this from source, I had to
* Install the Cygwin rpm and rpmbuild packages
* Extract the source rpm with "rpm -i"
* Attempt "rpmbuild -bp SPECS/mingw-glib2.spec --nodeps"
* Add some extra lines to the .spec file, and run above command again
* Run "./configure" and "make".

I used the following configure flags: "--with-threads=win32
--with-pcre=internal --disable-xattr --disable-selinux --disable-dtrace
--disable-shared --enable-static --disable-silent-rules" as well as setting
various environmental variables as above.

libintl
-------

Part of gettext. You will need version 0.18.2.1 to compile a static
version.
(https://lists.gnu.org/archive/html/bug-gettext/2013-01/msg00011.html)

Configure with:

$ ./configure --prefix=/mingw --build=i686-pc-cygwin \
 --host=i686-w64-mingw32 CFLAGS=-I/mingw/include \
 CPPFLAGS=-I/mingw/include CXXFLAGS=-I/mingw/include LDFLAGS=-L/mingw/lib \
 PKG_CONFIG_PATH=/mingw/lib/pkgconfig --disable-silent-rules \
 --disable-dependency-tracking --disable-java --disable-shared --disable-c++ \
 --disable-libasprintf --disable-acl --disable-openmp --disable-curses \
 --without-git --without-bzip2 --without-xz

There does not appear to be a simple way of only compiling libintl, so
this could take a while. The libintl source I downloaded did not have a
configure script.

zlib
----

Use the i686-w64-mingw32 zlib Cygwin package.

libxml2
-------

Install libiconv first (see below).

You will probably have to compile libxml2 from source. There is an MSYS
package, but it doesn't seem to contain all the symbols we need. There is
a download for Windows run-time from the libxml2 website, but it does not
include development headers.

Configuration is as with libgsf, except you should specify the
--without-python option instead (otherwise you pick up the Cygwin Python
headers and fail horribly).

libiconv
--------

Download and extract both run-time and development files from
http://sourceforge.net/projects/mingw/files/MinGW/Base/libiconv/libiconv-1.14-2/


